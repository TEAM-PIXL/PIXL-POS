name: Rollback on Failure

on:
  workflow_call:

jobs:
  rollback:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git User
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Determine Branch Name
        id: get_branch
        run: |
          branch_name=$(echo "${GITHUB_REF#refs/heads/}")
          echo "::set-output name=branch_name::$branch_name"

      - name: Find Last Successful Commit Tag for Current Branch
        id: find_last_good_commit
        run: |
          branch_name=${{ steps.get_branch.outputs.branch_name }}
          last_good_tag=$(git tag --list "deployed_${branch_name}_*" --sort=-creatordate | head -n 1)
          if [[ -z "$last_good_tag" ]]; then
            echo "No previous successful deployment found for branch $branch_name."
            exit 1
          fi
          echo "Last good tag for branch $branch_name: $last_good_tag"
          echo "last_good_tag=$last_good_tag" >> $GITHUB_ENV

      - name: Revert to Last Successful Commit
        run: |
          git fetch --tags
          git reset --hard ${{ env.last_good_tag }}
          git clean -fdx  # Clean up any untracked files and directories
          # Exclude workflow files from being reset
          git restore --staged .github/workflows/
          git reset -- .github/workflows/

      - name: Reconfigure Remote with PAT
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Check for Changes to Commit
        id: check_changes
        run: |
          if git diff --quiet; then
            echo "No changes to commit."
            echo "skip_commit=true" >> $GITHUB_ENV
          else
            echo "Changes detected."
            echo "skip_commit=false" >> $GITHUB_ENV

      - name: Commit and Push Reversion (if changes)
        if: env.skip_commit == 'false'
        run: |
          git commit -m "Reverted to last successful commit without changing workflows"
          git push origin HEAD:${{ steps.get_branch.outputs.branch_name }} --force 
          

      - name: Force Push Reset (No Changes Detected)
        if: env.skip_commit == 'true'
        run: |
          echo "No changes were detected, repository state is already at the last successful state."
          git push origin HEAD:${{ steps.get_branch.outputs.branch_name }} --force
